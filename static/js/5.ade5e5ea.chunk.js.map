{"version":3,"sources":["hooks/title.ts","helpers/payload.ts","helpers/time.ts","hooks/input.ts","components/Editor/index.tsx"],"names":["useTitle","title","opts","useEffect","document","replace","hyphen","decode","encodedPayload","JSON","parse","atob","encode","payloadObj","btoa","stringify","formatDuration","memoize","length","Error","forceMinutes","Math","floor","toString","padStart","useInput","defaultValue","useState","value","setValue","onChange","e","target","inputProps","Editor","history","useHistory","encodedData","useParams","data","payload","useMemo","titleInput","author","authorInput","youtubeURL","youtubeInput","setYouTubeURL","youtubeID","url","match","YOUTUBE_URL_REGEX","getYoutubeIDFromURL","playerRef","useRef","clipStart","setClipStart","clipEnd","setClipEnd","playlist","setPlaylist","playlistEntries","Object","entries","setStart","useCallback","current","getCurrentTime","setEnd","done","alert","obj","newPlaylist","push","undefined","currentPayload","version","currentURL","window","location","protocol","host","copyURL","navigator","clipboard","writeText","setVideo","id","skipTo","to","seekTo","getInternalPlayer","playVideo","className","type","placeholder","ref","controls","width","height","config","youtube","playerVars","showinfo","onClick","href","rel","map","video","clips","PlaylistVideoClips","props","expanded","setExpanded","key","disabled","clip"],"mappings":"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","file":"static/js/5.ade5e5ea.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\n\r\ninterface TitleHookOpts {\r\n  hyphen?: boolean;\r\n  replace?: boolean;\r\n}\r\n\r\nexport default function useTitle(title?: string, opts: TitleHookOpts = {}) {\r\n  useEffect(() => {\r\n    document.title = !!title\r\n      ? (opts.replace ? \"\" : \"Bestoff \" + (opts.hyphen ? \"- \" : \"\")) + title\r\n      : \"Bestoff\";\r\n  }, [title, opts.hyphen, opts.replace]);\r\n}\r\n","export function decode(encodedPayload: string) {\n  return JSON.parse(atob(encodedPayload.replace(/_/g, \"/\").replace(/-/g, \"+\")));\n}\n\nexport function encode(payloadObj: object) {\n  return btoa(JSON.stringify(payloadObj))\n    .replace(/\\//g, \"_\")\n    .replace(/\\+/g, \"-\");\n}\n","import { memoize } from \"lodash\";\r\n\r\ninterface FormatDurationOpts {\r\n  forceMinutes?: boolean;\r\n}\r\n\r\nexport const formatDuration = memoize(function formatDuration(\r\n  length: number,\r\n  opts: FormatDurationOpts = {}\r\n): string {\r\n  if (length < 0) {\r\n    throw new Error(\"Negative number are not supported\");\r\n  }\r\n\r\n  if (length < 60 && !opts.forceMinutes) {\r\n    return Math.floor(length).toString().padStart(2, \"0\") + \"s\";\r\n  }\r\n\r\n  if (length < 3600) {\r\n    return (\r\n      Math.floor(length / 60)\r\n        .toString()\r\n        .padStart(2, \"0\") +\r\n      \"m\" +\r\n      formatDuration(length % 60)\r\n    );\r\n  }\r\n\r\n  return (\r\n    Math.floor(length / 3600) +\r\n    \"h\" +\r\n    formatDuration(length % 3600, { forceMinutes: true })\r\n  );\r\n});\r\n","import { useState } from \"react\";\r\n\r\nexport default function useInput(\r\n  defaultValue: string = \"\"\r\n): [\r\n  string,\r\n  {\r\n    value: string;\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => unknown;\r\n  },\r\n  (value: string) => unknown\r\n] {\r\n  const [value, setValue] = useState<string>(defaultValue);\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const inputProps = {\r\n    value,\r\n    onChange,\r\n  };\r\n\r\n  return [value, inputProps, setValue];\r\n}\r\n","import React, {\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n} from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { ICompilation, IPlaylist } from \"types\";\r\nimport { formatDuration } from \"helpers/time\";\r\nimport { encode, decode } from \"helpers/payload\";\r\nimport useTitle from \"hooks/title\";\r\nimport useInput from \"hooks/input\";\r\nimport \"./style.css\";\r\n\r\nexport default function Editor() {\r\n  useTitle(\"Editor\");\r\n  const history = useHistory();\r\n  const { data: encodedData } = useParams();\r\n  const payload: ICompilation = useMemo(() => decode(encodedData), [\r\n    encodedData,\r\n  ]);\r\n  const [title, titleInput] = useInput(payload.data.title);\r\n  const [author, authorInput] = useInput(payload.data.author);\r\n  const [youtubeURL, youtubeInput, setYouTubeURL] = useInput();\r\n  const youtubeID = useMemo(() => getYoutubeIDFromURL(youtubeURL), [\r\n    youtubeURL,\r\n  ]);\r\n  const playerRef = useRef<ReactPlayer>(null);\r\n  const [clipStart, setClipStart] = useState<number | undefined>();\r\n  const [clipEnd, setClipEnd] = useState<number | undefined>();\r\n  const [playlist, setPlaylist] = useState<IPlaylist>(payload.data.playlist);\r\n  const playlistEntries = useMemo(() => Object.entries(playlist), [playlist]);\r\n\r\n  const setStart = useCallback(() => {\r\n    if (!playerRef.current) return;\r\n    setClipStart(playerRef.current.getCurrentTime());\r\n  }, [setClipStart]);\r\n\r\n  const setEnd = useCallback(() => {\r\n    if (!playerRef.current) return;\r\n    setClipEnd(playerRef.current.getCurrentTime());\r\n  }, [setClipEnd]);\r\n\r\n  const done = useCallback(() => {\r\n    if (!youtubeID || !clipStart || !clipEnd) {\r\n      return;\r\n    }\r\n    if (clipStart >= clipEnd) {\r\n      alert(\"Clip can't start after its end\");\r\n      return;\r\n    }\r\n    const newPlaylist = deepClone(playlist);\r\n    if (!newPlaylist[youtubeID]) newPlaylist[youtubeID] = [];\r\n\r\n    newPlaylist[youtubeID].push([clipStart, clipEnd]);\r\n    setPlaylist(newPlaylist);\r\n    setClipStart(undefined);\r\n    setClipEnd(undefined);\r\n  }, [youtubeID, playlist, clipStart, clipEnd]);\r\n\r\n  const currentPayload = useMemo(\r\n    () =>\r\n      encode({\r\n        version: \"1.0.0\",\r\n        data: {\r\n          title,\r\n          author,\r\n          playlist,\r\n        },\r\n      }),\r\n    [title, author, playlist]\r\n  );\r\n\r\n  useEffect(() => {\r\n    history.replace(\"/editor/\" + currentPayload);\r\n  }, [history, currentPayload]);\r\n\r\n  const currentURL = useMemo(\r\n    () =>\r\n      window.location.protocol +\r\n      \"//\" +\r\n      window.location.host +\r\n      \"/#/compilation/\" +\r\n      currentPayload,\r\n    [currentPayload]\r\n  );\r\n\r\n  const copyURL = useCallback(() => {\r\n    navigator.clipboard.writeText(currentURL);\r\n  }, [currentURL]);\r\n\r\n  const setVideo = useCallback(\r\n    (id: string) => {\r\n      setYouTubeURL(\"https://youtube.com/watch?v=\" + id);\r\n    },\r\n    [setYouTubeURL]\r\n  );\r\n\r\n  const skipTo = useCallback((to: number) => {\r\n    playerRef.current?.seekTo(to);\r\n    (playerRef.current?.getInternalPlayer() as any)?.playVideo();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Editor\">\r\n      <div className=\"Editor--video\">\r\n        <div>\r\n          <div className=\"Editor--video-input\">\r\n            <input\r\n              type=\"url\"\r\n              {...youtubeInput}\r\n              placeholder=\"Paste a YouTube video URL here\"\r\n            />\r\n            {!!youtubeURL.length && youtubeID === null && <span>&times;</span>}\r\n          </div>\r\n          {youtubeID ? (\r\n            <>\r\n              <div className=\"Editor--player\">\r\n                <ReactPlayer\r\n                  ref={playerRef}\r\n                  controls={true}\r\n                  width={\"100%\"}\r\n                  height={\"100%\"}\r\n                  url={\"https://youtube.com/watch?v=\" + youtubeID}\r\n                  config={{\r\n                    youtube: {\r\n                      playerVars: {\r\n                        showinfo: 0,\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"Editor--clippers\">\r\n                <button onClick={setStart}>Start clip here</button>\r\n\r\n                <div className=\"Editor--boundaries\">\r\n                  [\r\n                  {clipStart ? (\r\n                    <span onClick={() => skipTo(clipStart)}>\r\n                      {formatDuration(clipStart)}\r\n                    </span>\r\n                  ) : (\r\n                    \"?\"\r\n                  )}\r\n                  , {clipEnd ? formatDuration(clipEnd) : \"?\"}]\r\n                </div>\r\n\r\n                <button onClick={setEnd}>End clip here</button>\r\n              </div>\r\n\r\n              <div className=\"Editor--add\">\r\n                <button onClick={done}>Add to playlist</button>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"Editor--video-placeholder\">\r\n              <div>Enter a video first</div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"Editor--content\">\r\n        <div className=\"Editor--content-part\">\r\n          <h2>Details</h2>\r\n          <label>\r\n            <span>Title</span>\r\n            <input\r\n              type=\"text\"\r\n              {...titleInput}\r\n              placeholder=\"Compilation title\"\r\n            />\r\n          </label>\r\n          <label>\r\n            <span>Author</span>\r\n            <input type=\"text\" {...authorInput} placeholder=\"Your name\" />\r\n          </label>\r\n        </div>\r\n        <div className=\"Editor--content-part Editor--share\">\r\n          <h2>Share</h2>\r\n          <input type=\"text\" value={currentURL} />{\" \"}\r\n          <div>\r\n            <button onClick={copyURL}>Copy URL</button>{\" \"}\r\n            <a href={currentURL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Open\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"Editor--content-part\">\r\n          <h2>Playlist</h2>\r\n          {playlistEntries.length ? (\r\n            playlistEntries.map(([video, clips]) => (\r\n              <PlaylistVideoClips\r\n                video={video}\r\n                clips={clips}\r\n                setVideo={setVideo}\r\n                skipTo={skipTo}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div className=\"Editor--playlist-empty\">No clips added</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface PlaylistVideoClipsProps {\r\n  video: string;\r\n  clips: Array<[number, number]>;\r\n  setVideo: (id: string) => unknown;\r\n  skipTo: (to: number) => unknown;\r\n}\r\n\r\nfunction PlaylistVideoClips(props: PlaylistVideoClipsProps) {\r\n  const { video, clips, setVideo, skipTo } = props;\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n\r\n  return (\r\n    <div className=\"Editor--playlist-video\" key={video}>\r\n      <div>\r\n        <div>\r\n          <pre onClick={() => setVideo(video)}>{video}</pre> ({clips.length}{\" \"}\r\n          clips)\r\n        </div>\r\n        <button\r\n          onClick={() => setExpanded(!expanded)}\r\n          disabled={clips.length === 0}\r\n        >\r\n          {expanded ? \"-\" : \"+\"}\r\n        </button>\r\n      </div>\r\n\r\n      {expanded && (\r\n        <ul>\r\n          {clips.map((clip) => (\r\n            <li className=\"Editor--playlist-clip\" key={clip[0] + \"_\" + clip[1]}>\r\n              <pre onClick={() => skipTo(clip[0])}>\r\n                {formatDuration(clip[0])}\r\n              </pre>{\" \"}\r\n              -{\" \"}\r\n              <pre onClick={() => skipTo(clip[1])}>\r\n                {formatDuration(clip[1])}\r\n              </pre>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst YOUTUBE_URL_REGEX = /^.*(youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\r\n\r\nfunction getYoutubeIDFromURL(url: string) {\r\n  const match = url.match(YOUTUBE_URL_REGEX);\r\n\r\n  if (match && match[2].length >= 11) {\r\n    return match[2];\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction deepClone<T>(obj: T) {\r\n  return JSON.parse(JSON.stringify(obj)) as T;\r\n}\r\n"],"sourceRoot":""}